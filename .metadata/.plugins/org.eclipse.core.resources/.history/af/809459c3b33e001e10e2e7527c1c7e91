package com.app.Services;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import javax.transaction.Transactional;

import com.app.CustomExceptions.ResourceNotFoundException;
import com.app.Entities.Feedback;
import com.app.Entities.Gym;
import com.app.Entities.GymClass;
import com.app.Entities.Member;
import com.app.Entities.SubscriptionData;
import com.app.Repository.GymClassRepository;
import com.app.Repository.GymRepository;
import com.app.Repository.MemberRepository;
import com.app.Repository.SubscriptionRepository;

@Service
@Transactional
public class MemberService {

	@Autowired
	private MemberRepository memberRepository;
	
	@Autowired
	private GymRepository gymRepository;
	
	@Autowired
	private SubscriptionRepository subscriptionRepository;
	
	@Autowired
	private GymClassRepository gymClassRepository;
	
	
	public Member addNewMember( Member member){
		Member m=memberRepository.save(member);
		return m;
	}
	
	public List<Gym> selectGym()
	{
		return gymRepository.findAll();
	}
	
	public Member addGym( Gym g, Integer memberId){
		Member m=memberRepository.findById(memberId).orElseThrow(()->new ResourceNotFoundException("member not found!"));
			m.setOwner(g.getOwner());
			return memberRepository.save(m);
	}
	
	public Member givefeedback( Feedback f,Integer memberId){
		Member m=memberRepository.findById(memberId).orElseThrow(()->new ResourceNotFoundException("member not found!"));
		m.setFeedback(f);
		return memberRepository.save(m);
	}
	
	public SubscriptionData payAndSubscribe(SubscriptionData data,Integer memberId)
	{
		Member m=memberRepository.findById(memberId).orElseThrow(()->new ResourceNotFoundException("member not found!"));
		m.setSubscriptionData(subscriptionRepository.save(data));
		memberRepository.save(m);
		return m.getSubscriptionData();
	}
	
	 public List<GymClass> selectGymClass(Integer memberId){
		 Member m=memberRepository.findById(memberId).orElseThrow(()->new ResourceNotFoundException("member not found!"));
		 return m.getOwner().getClasses();
	 	}
	 
	 public GymClass setGymClass(GymClass g,Integer memberId) {
		 Member m=memberRepository.findById(memberId).orElseThrow(()->new ResourceNotFoundException("member not found!"));
		 //Requires Testing once
		 g=gymClassRepository.findById(g.getId()).orElseThrow(()->new ResourceNotFoundException("gymclass not found!"));
		 m.setGymClass(g);
		 g.getMembersInGym().add(m);
		 memberRepository.save(m);
		return gymClassRepository.save(g);
		 
	 }
}
